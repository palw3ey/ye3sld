name: Publish to TestPyPI

on:
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build hatch twine pylint flake8 boto3

      - name: Run tests
        id: unittest
        env:
          URL: "${{ secrets.URL }}"
          ID: "${{ secrets.ID }}"
          SECRET: "${{ secrets.SECRET }}"
          BASE: "${{ secrets.BASE }}"
          ARGUMENTS: "${{ vars.ARGUMENTS }}"
        run: python -m unittest discover -s tests -p "*.py"
        
      - name: Run Pylint
        id: pylint
        run: |
          pylint_output=$(pylint src/ye3sld/ye3sld.py | tee pylint_report.txt)
          pylint_score=$(echo "$pylint_output" | grep 'Your code has been rated at' | awk '{print $7}')
          echo "Pylint score: $pylint_score"
          echo "pylint_score=$pylint_score" >> $GITHUB_ENV
         
      - name: Run Flake8
        id: flake8
        run: |
          flake8 src/ye3sld/ye3sld.py > flake8_report.txt || true
          flake8_errors=$(cat flake8_report.txt | wc -l)
          echo "Flake8 errors: $flake8_errors"
          echo "flake8_errors=$flake8_errors" >> $GITHUB_ENV

      - name: Check Linting Results
        run: |
          echo "Pylint score: ${{ env.pylint_score }}"
          echo "Flake8 errors: ${{ env.flake8_errors }}"
          if [ "${{ env.pylint_score }}" != "10.00/10" ] || [ "${{ env.flake8_errors }}" -ne 0 ]; then
            echo "Linting failed. Please fix the issues."
            exit 1
          fi
          echo "Linting passed successfully."

      - name: Build the package
        run: python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-artifacts
          path: dist/*

      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TESTPYPI }}
        run: twine upload --verbose --repository testpypi dist/*
